/* viewProfile.js 
 * Provides functionality for displaying a user's profile. 
 */ 

var dbAccess = require('dbAccess'), 
	step = require('step');
	users = require('users'); 
	url = require('url');

var ViewProfile = exports.ViewProfile = function() {};

/**
 * Display a profile page
 * @param request A http request object from the client
 * @param response A http response object to send the data
 */
ViewProfile.display = function(request, response) {
	var parsedURL = url.parse(request.url, true);
	var profileUserId = parsedURL.query.id;
	
	request.getUser(function(error, user) {
		if (error) throw error;
		var loggedIn = false;
		var loggedInUserId = null; 
		
		console.log(user);
		if (user && (profileUserId == user.id || !profileUserId)) { 
			profileUserId = user.id; 
		}
		if (user) {
			loggedIn = true;
			loggedInUserId = user.id;
		}
		if (!profileUserId && user != null) { 
			profileUserId = user.id; 
		}
		
		dbAccess.find('users', { conditions:['id="' + profileUserId + '"'] }, function(error, userResults) {
			if (error) throw error;
			// If the user_id specified is not found in the db - error
			if (userResults.length != 1) { // Properly handle if the user_id is not valid
				variables = { found: false, user_id: profileUserId }; 
				response.render('views/viewProfile.html', variables);
			}
			else { // If user_id is found, display personal information and the list of issues

				user = userResults[0];
				step(
					function loadData() { 
						dbAccess.find('issues', { conditions:['user_id="' + user.id + '"'], orderby: 'created desc' },
							this.parallel()); 
						users.isUserFollowedByUser(profileUserId, loggedInUserId, this.parallel()); 
					}, 
					function handleCallback(err, issues, isFollowed) { 
						variables = {
							found: true,
							name: user.name,
							neighborhood: user.neighborhood || 'None',
							postal_code: user.postal_code || 'None',
							facebook_account: user.facebook_account || 'None',
							twitter_account: user.twitter_account || 'None',
							has_website: user.website,
							website: user.website || 'None',
							issues_list: issues,
							has_issues: issues.length > 0,
							is_loggedin: loggedIn, 
							reputation: user.reputation_score, 
							user_id: user.id, 
							is_followed: isFollowed,
							is_viewing_own_profile: (loggedInUserId == profileUserId)
						};  
						response.render('views/viewProfile.html', variables);
					}
				);
			}
		});
	});
}
