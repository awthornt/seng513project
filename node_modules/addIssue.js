/* addIssue.js
 * Provies a functionality for adding new issues 
 */

var querystring = require('querystring'),
	util = require('util'),
	dbAccess = require('dbAccess'),
	reputation = require('reputation'),
	tags = require('tags.js'),
	formidable = require('formidable');
	fs = require('fs');
	
var AddIssue = exports.AddIssue = function() {};
	
AddIssue.display = function(req, res) {
	var variables = {};

	if(req.method.toUpperCase() != 'POST'){
		req.getUser(function(error, user){
			if(error) throw error;
			variables.loggedIn = user;
			variables.display = "true";
			variables.textarealimit = 5000;
			variables.inputlimit = 150;
			res.render('views/addIssue.html', variables);
		});
		return;
	}


	var form = formidable.IncomingForm();
	//TODO: I think this can break too easily.
	//would like to have __approot + '/public/uploads/'
	form.uploadDir = __dirname + '/../public/uploads/';
	
	form.parse(req, function(err, fields, files){
		if (err) throw err;
		
		req.getUser(function(error, user){
			
			variables.loggedIn = user;
			
			console.log(fields);
			console.log(files);
			
			var post = fields;
			
			var fileLoc = "";
			
			if (files.file){
				fileLoc = files.file.name;
			}
			
			// insert issue from the form 
			dbAccess.create('issues', { values: ['user_id="' + user.id + '"',
				'status="online"',
				'title="' + post.title + '"',
				'description="'+ post.description + '"',
				'link="' + post.link + '"',
				'fileLocation="' + fileLoc + '"',
				'location="' + post.location + '"']},
				function(error, issueId) {
					if (error) { // if an error occurred when inserting a new issue, print out the error
						console.log("Error inserting issue into database!"); 
						console.log(error); 
						// using history.back() function to go back to previous page to retain input form data
						variables.error = true;						
					}
					else {
						util.log("Successfully added a new issue with id " + issueId);
						util.log("user_id = " + post.title); 
						util.log("title = " + post.title); 
						util.log("description = " + post.description); 
						util.log("link = " + post.link); 
						util.log("location = " + post.location); 
						util.log("tags = " + post.tags);
						
						if (files.file){
							// Rename File and make issueID directory, and put the file into this new directory
							var newPath = form.uploadDir + issueId + "/"
							fs.mkdir(newPath, 755);
							var newName = newPath + files.file.name;
							fs.rename(files.file.path, newName);
						}
					
						// Now add the tags if any were entered
						if (post.tags) {
							tags.tagIssue(issueId, post.tags, function (error) {
								if (error) {
									util.log("Error adding tags in addIssue");
									variables.fail = true;
								}
								else {
									variables.index = "'/index.html'";
									util.log("Issue " + issueId + " tagged successfully.");
									variables.success = true;
								}
							});
						}
						else {
							util.log("no tags to add..done!");
							util.log("Issue " + issueId + " tagged successfully.");
							// Show the success page
							variables.success = true;
						}
						
						// Add reputation for issue author 
						reputation.updateOnAddIssue(issueId, user.id); 
					}
				}); // end create
				
			variables.add = true;
			res.render('views/addIssue.html', variables);
		});
	});
}

/* 
 * Handle post form	
 */
AddIssue.add = function(req, res) {
	AddIssue.display(req,res);
}
