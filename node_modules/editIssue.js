var dbAccess = require('dbAccess.js'),
	url = require('url'),
	tags = require('tags');

var EditIssue = exports.EditIssue = function() {
};

/**
* Send the HTML page to the client
* @param response Response object to send the data
*/
function displayPage(response, user_id, isEditor) {
	return function(error, rows) {
		
		var canEdit = false;
		
		if (rows[0]==undefined) {
			//TODO: Throw the error through a template so that the user
			// is redirected to the previous page with the error displayed
			response.writeHeader(200, {"Content-Type": "text/html"});
			response.end('<html><body><h1>Database Error</h1></body></html>');
		}
		else {
			var issue = rows[0];
			
			//Check if logged in user is issue creator or an editor
			if ((issue.user_id == user_id) || isEditor)
				canEdit = true;

			if (canEdit){
				// Get the tags
				tags.getTagsString(issue.id, function(tags) {
					variables = {
						canEdit: canEdit,
						title: issue.title,
						status: issue.status,
						location: issue.location,
						description: issue.description,
						file_name: issue.fileLocation,
						file_link: 'uploads/'+issue.id+'/'+issue.fileLocation,
						link: issue.link,
						tags: tags,
						issueId: issue.id,
						openSelected: (issue.status == 'open'),
						resolvedSelected: (issue.status == 'resolved'),
						textarealimit: 5000,
						inputlimit: 150
					}
					response.render('views/editIssue.html', variables);
				});
				
			}
			else {
				variables = {
					canEdit: canEdit,
					issueId: issue.id
				}
				
				response.render('views/editIssue.html', variables);
			}
		}
	};
}

/**
* Main function of the module
* @param request Incoming request
* @param response Response object to send the data
*/
EditIssue.display = function(request, response) {
	var parsedURL = url.parse(request.url, true);

	var sqlQuery = 'SELECT * FROM issues WHERE id=' + parsedURL.query.id;

	request.getUser(function(error, user){
		if(error)
		throw error;
		// only allow logged in editors or original posters to edit the issue
		if(user){
			if (user.isEditor == '1')
			dbAccess.runQuery(sqlQuery, displayPage(response, user.id, true));
			// is a logged in user but not an editor so we check to see if the logged
			// in user is the issue creator.
			else {
				dbAccess.runQuery(sqlQuery, displayPage(response, user.id, false));
			}
		}
		//Your not even logged in.
		else
		{
		//TODO: Redirects back to the issue that not authorized user tried to edit.
		// Should add some notification that says you can't view it		
			response.writeHead(302, {'location': '/viewIssue?id='+parsedURL.query.id});
			response.end();
		}
	})

}
