/*
 * Module for new user signup
 *
 * Created By: Jonathan Moore, Corliss Fung, Nasrullah Taha
 */

var dbAccess = require('dbAccess'),
    qs = require('querystring'),
    crypto = require('crypto'),
    reputation = require('reputation'),
    util = require('util'),
    user = require('user'),
    sanitizeInputs = require('sanitizeInputs.js');

var SignupModule = exports.SignupModule = function() {
    this.name;
    this.email;
    this.password;
};

/*
 * Create a new user in the database
 */
SignupModule.handleSignup = function(req, res)
{
    if(req.method != 'POST') {
        res.render('views/signup.html');
        return;
    }
   
    console.log("New user signup initiated.");

    // The form data from the request is first read into SignupBody
    var signupBody = '';   
    req.on('data', function(chunk) {
        signupBody += chunk.toString();
    });
   
    // When all data is received, the data is parsed and inserted into database
    req.on('end', function() {
        // Parse the signup form information
        var signupInfo = qs.parse(signupBody);
        var name = signupInfo['name'];
        var email = signupInfo['email'];
        var password = signupInfo['new_password'];
        var confirm_password = signupInfo['confirm_password'];
        var neighborhood = signupInfo['neighborhood'];
        var postalcode = signupInfo['postalcode'];

		var actualcode = signupInfo['code'];
		var enteredcode = signupInfo['user_code'];
		
		//Make sure required fields are not blank
		if(name == "") {
			console.log('No username entered');
			res.render('views/signup.html', {error: 'Signup Failed - Username is required!'});
			return;
		}
		if(email == "") {
			console.log('No email entered');
			res.render('views/signup.html', {error: 'Signup Failed - Email is required!'});
			return;
		}
		if(password == "") {
			console.log('No password entered');
			res.render('views/signup.html', {error: 'Signup Failed - Password is required!'});
			return;
		}
		if(password != confirm_password) {
			console.log('Passwords dont match');
			res.render('views/signup.html', {error: 'Signup Failed - Passwords do not match!'});
			return;
		}
		var emailPattern = /^[A-Z0-9.]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i; 
    	if(!emailPattern.test(email)) {
    	    console.log('Invalid email');
			res.render('views/signup.html', {error: 'Signup Failed - Email is not valid!'});
			return;
    	} 
		
		
		//Make sure the CAPTCHA code is correct
		if (actualcode == "1") 
		{
			if (enteredcode != "polish")
			{
				console.log('Wrong CAPTCHA');
				res.render('views/signup.html', {error: 'Signup Failed - You entered the wrong code!'});
				return;

			}
		}
		else if (actualcode == "2") 
		{
			if (enteredcode != "past")
			{
				console.log('Wrong CAPTCHA');
				res.render('views/signup.html', {error: 'Signup Failed - You entered the wrong code!'});
				return;

			}
		}
		else if (actualcode == "3") 
		{
			if (enteredcode != "part")
			{
				console.log('Wrong CAPTCHA');
				res.render('views/signup.html', {error: 'Signup Failed - You entered the wrong code!'});
				return;
			}
		}
		else if (actualcode == "4") 
		{
			if (enteredcode != "when")
			{
				console.log('Wrong CAPTCHA');
				res.render('views/signup.html', {error: 'Signup Failed - You entered the wrong code!'});
				return;
			}
		}
		else if (actualcode == "5") 
		{
			if (enteredcode != "much")
			{
				console.log('Wrong CAPTCHA');
				res.render('views/signup.html', {error: 'Signup Failed - You entered the wrong code!'});
				return;
			}
		}
		else if (actualcode == "6") 
		{
			if (enteredcode != "seed")
			{
				console.log('Wrong CAPTCHA');
				res.render('views/signup.html', {error: 'Signup Failed - You entered the wrong code!'});
				return;
			}
		}
		else if (actualcode == "7") 
		{
			if (enteredcode != "soap")
			{
				console.log('Wrong CAPTCHA');
				res.render('views/signup.html', {error: 'Signup Failed - You entered the wrong code!'});
				return;
			}
		}
		else if (actualcode == "8") 
		{
			if (enteredcode != "glove")
			{
				console.log('Wrong CAPTCHA');
				res.render('views/signup.html', {error: 'Signup Failed - You entered the wrong code!'});
				return;
			}
		}
		else if (actualcode == "9") 
		{
			if (enteredcode != "sticky")
			{
				console.log('Wrong CAPTCHA');
				res.render('views/signup.html', {error: 'Signup Failed - You entered the wrong code!'});
				return;
			}
		}
		else if (actualcode == "10") 
		{
			if (enteredcode != "soap")
			{
				console.log('Wrong CAPTCHA');
				res.render('views/signup.html', {error: 'Signup Failed - You entered the wrong code!'});
				return;
			}
		}
       
        // Encrypt password
        cryptoPassword = user.md5hash(password);
       
        console.log("before going in");

        // Check if username already exists
        dbAccess.find('users', { conditions:['email="' + email + '"']}, function(error, records){
            if (error) throw error;

            if (records.length != 0) {    // username already exists
                console.log('Sorry, that email already exists. Please enter another');
                res.render('views/signup.html', {error: 'Signup Failed - email: ' + email + ' already exists.'});

            }
            else {    // insert new user into database
                var sqlInsertNewUser = "INSERT INTO 'users' ('name', 'email', 'password', 'isEditor') "
                    + "VALUES ('" + sanitizeInputs.removeTags(name) + "', '" + sanitizeInputs.removeTags(email) + "', '" + cryptoPassword + "', '" + 'true' + "');";

                dbAccess.runQuery(sqlInsertNewUser, function(error, rows){
                    if(error) {
                        // If a database error is generated, just spit out failure message
                        console.log('Error occured saving to Database during Signup:' + error.toString());
                        res.render('views/signup.html', {error: 'Signup Failed: Database error.'})
                    }
                    else {
                        // On success, redirect user to Welcome page.
                        reputation.updateOnSignUp(name, email);
                        // Find id of newly created user - note: without UNIQUE constraint, this may return multiple users but will lock on to first, security hole.
                        dbAccess.find('users', { conditions:['email="' + email + '"']}, function(error, records){
                            if (error) throw error;

                            if (records) {
                                console.log("User with email:'" + email + "' was successfully created, id = " + records[0].id);
                                res.setHeader('set-cookie', 'session=' + records[0].id);
                                redirectTo(res, '/signupSuccess.html');
                            }
                        }); // end dbAccess.find()               
                    }
                }); // end dbAccess.runQuery()
            }           
        }); // end dbAccess.find()
    }); // end req.on()
};

