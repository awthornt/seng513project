/* users.js 
 * Provides functionality for managing and retrieving information about users
 */

var dbAccess = require('dbAccess');

/* getIdFromUsername 
 * Gets the id of a user based on the username 
 * 
 * @param username The username to lookup
 * @param callback The callback with (error, results) 
 */ 
exports.getIdFromUsername = function(username, callback) {
	getUserProperties(['id'], ['name="' + username +'"'], function(error, results) { 
		if (error) { 
			if (callback instanceof Function) callback(error); 
		}
		else { 
			if (callback instanceof Function) callback(error, results.id);
		}
	}); 
}

/* getUsernameFromId 
 * Gets the username of a user from a userid 
 * 
 * @param userid The user id to lookup the username 
 * @param callback The callback with (error, results) 
 */ 
exports.getUsernameFromId = function(userid, callback) {
	getUserProperties(['name'], ['id="' + userid +'"'], function(error, results) { 
		if (error) { 
			if (callback instanceof Function) callback(error); 
		}
		else { 
			if (callback instanceof Function) callback(error, results.name); 
		}
	}); 
}

/* getUserFollowers 
 * Gets the all the followers for a user 
 * 
 * @param userId The user id 
 * @param callback The callback with (error, results) 
 */ 
exports.getUserFollowers = function(userId, callback) { 
	dbAccess.find('followed_users', { properties: ['follower_user_id'], 
		conditions: ['user_id="' + userId + '"'] }, function(error, results) { 
			if (error) { 
				if (callback instanceof Function) callback(error, results);
			}
			else { 
				var followerUserIds = [];  
				for (i in results) { 
					followerUserIds.push(results[i].follower_user_id); 
				}
				if (callback instanceof Function) callback(undefined, followerUserIds);
			}
	}); 
}

/* getFollowedUsers  
 * Gets the users follwed by a given user 
 * 
 * @param userId The user id 
 * @param callback The callback with (error, results) 
 */ 
exports.getFollowedUsers = function(userId, callback) { 
	dbAccess.find('followed_users', { properties: ['user_id'], 
		conditions: ['follower_user_id="' + userId + '"'] }, function(error, results) { 
			if (error) { 
				if (callback instanceof Function) callback(error, results);
			}
			else { 
				var followedUserIds = [];  
				for (i in results) { 
					followedUserIds.push(results[i].user_id); 
				}
				if (callback instanceof Function) callback(undefined, followedUserIds);
			}
	});
}

/* isUserFollowedByUser 
 * Determines if a given user is being followed a specified follower 
 * 
 * @param userId The id of the user who is being followed 
 * @param followerId The id of the user who is the follower 
 * @param callback The callback with (error, results) where results is: 
 *   true if user is being followed by the specified follower user id; false otherwise 
 */ 
exports.isUserFollowedByUser = function(userId, followerId, callback) { 
	if (userId == followerId) { 
		if (callback instanceof Function) callback(undefined, false);
	}
	else { 
		exports.getUserFollowers(userId, function(error, results) { 
			if (error) { 
				if (callback instanceof Function) callback(error, results);
			}
			else { 
				var isUserFollowed = false; 
				for (i in results) { 
					if (results[i] == followerId) { 
						isUserFollowed = true; 
						break; 
					}
				}
				if (callback instanceof Function) callback(undefined, isUserFollowed);
			}
		}); 
	}
}

/* followUser 
 * Follows a user 
 * 
 * @param userId The id of the user who wants to follow another user 
 * @param followedUserId The id of the target user who is to be followed 
 * @param callback The callback with (error) 
 */ 
exports.followUser = function(userId, followedUserId, callback) { 
	if (userId == followedUserId) { 
		var msg = 'Error following user: a user cannot follow themselves.';  
		if (callback instanceof Function) callback(msg); 
	}
	else { 
		exports.isUserFollowedByUser(followedUserId, userId, function(error, results) {
			if (error) { 
				if (callback instanceof Function) callback(error); 
			}
			else if (results) { 
				if (callback instanceof Function) callback('User is already being followed'); 
			}			
			else { 
				dbAccess.create('followed_users', { values:['follower_user_id="' + userId +'"', 
					'user_id="' + followedUserId + '"'] }, function(error, id) {
					callback(error); 
				}); 
			}
		}); 
	}
}

/* unfollowUser 
 * Unfollows a user 
 * 
 * @param userId The id of the user 
 * @param followedUserId The id of the user to be unfollowed 
 * @param callback The callback with (error) 
 */ 
exports.unfollowUser = function(userId, followedUserId, callback) { 
	if (userId === followedUserId) { 
		var msg = 'Error unfollowing user: a user cannot unfollow themselves.';  
		if (callback instanceof Function) callback(msg); 
	}
	else { 
		exports.isUserFollowedByUser(userId, followedUserId, function(error, results) {
			if (error) { 
				if (callback instanceof Function) callback(error); 
			}
			else if (results) { 
				// User not being followed, so we don't need to do anything 
				if (callback instanceof Function) callback(undefined); 
			}
			else { 
				// Found follow relationship: remove it 
				dbAccess.remove('followed_users', { conditions:['follower_user_id="' + userId +'"', 
					'user_id="' + followedUserId + '"'] }, function(error, id) {
					callback(error); 
				}); 
			}
		});
	}
}

/* getUserProperties 
 * Helper method for retrieve user properties 
 * 
 * @param props The user properties to retrieve 
 * @param conds The user conditions to enforce 
 * @param callback The callback with (error, results) from the database 
 */ 
function getUserProperties(props, conds, callback) { 
	dbAccess.find('users', { properties: props, conditions: conds }, 
		function(error, results) { 
			if (error) {
				if (callback instanceof Function) callback(error);
			}
			else if (results.length != 1) { 
				var msg = 'Error retrieving user.' + results.length + ' users found.'; 
				if (callback instanceof Function) callback(msg);
			}
			else { 
				if (callback instanceof Function) callback(undefined, results[0]);
			} 
	});
}
