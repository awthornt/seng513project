/* 
 * listIssues.js 
 * Contains functionality for rendering the issue list view 
 */ 
var dbAccess = require('dbAccess'); 
var	url = require('url');

// Number of issue per page
var issuesPerPage = 10;

var ListIssues = exports.ListIssues = function() {};

/**
* Main entry point for the module
* @param request Incoming request
* @param response Response object to send the data
*/
ListIssues.display = function(request, response) {
    var parsedURL = url.parse(request.url, true);

    var searchParams = {};
    searchParams.sortBy = parsedURL.query['sortby'];
    searchParams.page = parsedURL.query['page'];
    searchParams.search = parsedURL.query['search'];
    searchParams.direction = parsedURL.query['direction'];
    if (searchParams.page == undefined || isNaN(searchParams.page))
    {
        searchParams.page = 1;
    }
    if(!searchParams.sortBy)
    {
        searchParams.sortBy = 'lastModified';
    }
    if(!searchParams.direction)
    {
        searchParams.direction = 'ASC';
    }
	
	var sqlQuery = 'SELECT count(*) FROM issues ' +
	    searchQuery(searchParams.search);
	dbAccess.runQuery(sqlQuery, getPageCount(searchParams, response));
}

/**
 * Retrieves the number total of pages
 * @param searchParams a list of parameters to be passed forward 
 * @param response Response object to send data to the client
 */

function getPageCount(searchParams, response) {
    return function(error, rows) {
        if (error) {throw error;}

        var resultCount = rows[0]['count(*)'];
        var pageCount = resultCount / issuesPerPage;
        if (pageCount != Math.floor(pageCount))
        {
            pageCount++;
            pageCount = Math.floor(pageCount);
        } 
        if (pageCount == 0)
        {
            pageCount = 1;
        }
        if (searchParams.page > pageCount)
        {
            searchParams.page = pageCount;
        }
        
        searchParams.resultCount = resultCount;
        searchParams.pageCount = pageCount;
        
        var sqlQuery = 'SELECT * FROM issues ' +
            searchQuery(searchParams.search) + 
            orderQuery(searchParams.sortBy, searchParams.direction) +
            ' limit ' + issuesPerPage +
            ' offset ' + (searchParams.page - 1) * issuesPerPage;
        dbAccess.runQuery(sqlQuery, printPage(searchParams, response));
    };
}

/**
 * Prints the list of issues
 * @param searchParams a list of parameters to be passed forward 
 * @param response Response object to send data to the client
 */
function printPage(searchParams, response) {
    return function(error, rows) {	
        if (error) {throw error;}

		content = []; 
			
        for (i=0; i<rows.length; i++)
        {			
            var likes = (rows[i]['likes'] != null) ? rows[i]['likes'] : 0;
            var obj = {
                iStatus: rows[i]['status'],
                iId: rows[i]['id'],
                iTitle: rows[i]['title'],
                iLastModified:	rows[i]['lastModified'],
                promotes: likes
            };	
            content.push(obj);
        }
        
        /* Setup variables */
        var sortbyQueryString = queryString('sortby', searchParams.sortBy);
        var searchQueryString = queryString('search', searchParams.search);
        var directionQueryString = queryString('direction', searchParams.direction);
        var switchDirQueryString = queryString('direction',
            searchParams.direction == 'ASC' ? 'DESC' : 'ASC');
        var title = "Latest Issues";
        if(searchParams.search != null)
        {
            title = "Search Results For: " + searchParams.search;
        }  
        
        variables = {
            title: title,
            content: content,
            pageNumber: searchParams.page,
            resultCount: searchParams.resultCount,
            noResults: content.length == 0,
            wasSearch: searchParams.search != null,
            pageCount: searchParams.pageCount,
            sortbyQueryString: sortbyQueryString,
            searchQueryString: searchQueryString,
            directionQueryString: directionQueryString,
            switchDirQueryString: switchDirQueryString,
        }
        
        /* Previous page */
        if (searchParams.page - 1 > 0)
        {
            variables.previous = searchParams.page - 1;
        }
        
        /* Next page */
        if (parseInt(searchParams.page) + 1 <= searchParams.pageCount)
        {
            variables.next = parseInt(searchParams.page) + 1;
        }

        /* Pager */
        var pager = [];
        for (i = searchParams.page - 2; i <= searchParams.pageCount; i++)
        {
            if (i > 0)
            {
                if (i != searchParams.page)
                {
                    var link = '<a href="/?' + 
                        sortbyQueryString + 
                        searchQueryString + 
                        directionQueryString +
                        'page=' + i + '">' + i + '</a>';
                } 
                else
                {
                    var link = '[' + i + ']';
                }
                var obj = { page: link }
                pager.push(obj);
            }
        }
        variables.pager = pager;
        
        response.render('views/listIssue.html', variables);
    };
}

/**
 * Returns a WHERE clause for an SQL query
 * to search for a specific term
 * @param search The search term
 */
function searchQuery(search)
{
    matching = '';
    if(search)
    {
        matching += "WHERE (title LIKE '%" + search + "%')" + 
            "OR (description LIKE '%" + search + "%')";
    }
    return matching;
}

/**
 * Returns ORDER BY clause for an SQL query
 * @param search The search term
 */
function orderQuery(sortBy, direction)
{
	reverseDirection = (direction == 'ASC') ? 'DESC' : 'ASC';
	orderBy = ' ORDER BY ' + sortBy + ' ' + direction;
		
    return orderBy;
}

/**
 * Returns a query string for use in an http request
 * @param name
 * @param value
 */
function queryString(name, value)
{
    var queryString = "" ;
    if (value)
    {
        queryString = name + '=' + value + '&';
    }
    return queryString;
}
