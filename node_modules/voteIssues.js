var dbAccess = require('dbAccess'), 
	url = require('url'),
	reputation = require('reputation'),
	querystring = require('querystring'),
	emailUtil = require('emailUtil'); 
	
var g_userVote;
var g_userId;
var g_IssueId;

var VoteIssues = exports.VoteIssues = function() {};

/**
* Takes care of the voting on issues
*/
function printPage(response) {
	return function(error, rows) {	
		if (error) throw error;
	
		if (rows.length == 0) //If the user hasn't voted on this issue
		{	
			if (g_userVote == 0) { 
				reputation.updateOnIssueUpVote(g_IssueId, g_userId); 
			
				var sqlInsertUserVote = "INSERT INTO 'votes' ('user_id', 'issue_id', 'vote') "
					+ "VALUES ('" + g_userId + "', '" + g_IssueId + "', '" + g_userVote + "');";
				dbAccess.runQuery(sqlInsertUserVote, function(error, rows) {
					if (error) {
						// If an error is generated
						console.log('Error occured saving Vote to the Database:' + error.toString());					
						response.write('<html><script language=\'JavaScript\'>alert(\'Your vote could not be recorded! There was an error connecting to the database.\'),history.go(-1)</script></html>');
						response.end();
					}
					else { //Successful Vote				
						// After inserting new vote, update the likes/dislikes count in issues table
						VoteIssues.updateIssueVotes(g_IssueId);
					
						//Simply go back to the previous page for now
						response.write('<html><script language=\'JavaScript\'>window.location="/viewIssue?id=' + g_IssueId + '"</script></html>');
						response.end();
					}
				});
			}
			else { 
				reputation.updateOnIssueDownVote(g_IssueId, g_userId); 
			}			
		}
		else {					
			response.write('<html><script language=\'JavaScript\'>alert(\'Sorry you have already voted!\'),history.go(-1)</script></html>');
			response.end();		
		}
	}
}

/**
* Main function of the module
* @param request Incoming request
* @param response Response object to send the data
*/
VoteIssues.display = function(request, response) {
	var parsedURL = url.parse(request.url, true);		
	var requestString = "";

	request.on('data', function(chunk) {
		requestString += chunk;
	});
	request.on('end', function(chunk) {
		request.getUser(function(error, user) {		
			if (error) throw error;			
			if (user) {
				console.log("voteCommentsjs: User is logged in");
				g_userId = user.id;
			}
			if (g_userId == undefined) {	
				console.log("voteIssues.js: Error: User is *not* logged in. Can't vote on comments");
				//If the user is not logged in, redirect to the static message page
				response.write('<!DOCTYPE HTML><html><head><title>Please wait</title>');
				response.write('<meta http-equiv="REFRESH" content="0;url=./public/voteFailed.html"></HEAD><BODY></BODY></HTML>');
				response.end();		
				return;
			}
		
			g_userVote = parsedURL.query.vote;
			g_IssueId = parsedURL.query.issueid;
		
			var decodedBody = querystring.parse(requestString);

			// sending email notification to the issue's owner that their issue has been promoted
			dbAccess.find('users', { conditions:['id="' + g_userId + '"']}, function(error, this_user){
				if (error) throw error;
				if (this_user) {
					dbAccess.find('issues', { conditions:['id="' + g_IssueId + '"']}, function(error, issue_owner){
						if (error) throw error;
						if (issue_owner) {
							dbAccess.find('users', { conditions:['id="' + issue_owner[0].user_id + '"']}, function(error, owner){
								if (error) throw error;
								if (owner) {
									console.log('sending notification to user: ' + issue_owner[0].user_id + ' with email: ' + owner[0].email);
									var subject = '[CivicConnect] ' + this_user[0].name + ' has promoted your issue';
									var body = '<html><body><h4>Issue: ' + issue_owner[0].title + '</h4>' +
											   '<p>' + this_user[0].name + ' has promoted your issue. ' + 
											   'It is now standing at a promoted status of ' +
											   issue_owner[0].promotes + '</p><br>' +
											   '<h6>To see more details, follow the link below:</h6>' +
											   '<a href="' + decodedBody.link + '">' + decodedBody.link + '</a></body></html>';								

									emailUtil.sendHTMLEmailToUserId(issue_owner[0].user_id, subject, body, function(error, success) {
										if (error)
											console.log('Error sending notification email to ' + owner[0].email);
										else
											console.log('Notification email sent successfully to ' + owner[0].name + ' ' + owner[0].email);
									});
								}
							}); // end dbAccess.find()
						}
					}); // end dbAccess.find()
				}
			});	// end dbAccess.find()

			var sqlQuery = 'SELECT * FROM votes WHERE issue_id =  ' + g_IssueId + ' AND user_id = ' + g_userId ;			
			dbAccess.runQuery(sqlQuery, printPage(response));		
		}); // end request.getUser()	
	}); // end request.on()				
}

/**
* Function to update the like and dislike vote counts for issues
* @param id of the issue whose votes we wish to update
*/
VoteIssues.updateIssueVotes = function(issueId)
{
	console.log("UPDATING ISSUE VOTES");
	
	var sqlCountPromotes = "SELECT count(*) AS 'promotes' FROM votes WHERE issue_id=" + issueId + " AND vote=0;";
	dbAccess.runQuery(sqlCountPromotes, function(error, rows) {
		var promoteCount = rows[0].promotes;
			var updateParams = { values:['promotes=' + promoteCount], conditions:['id=' + issueId] };
			dbAccess.update('issues', updateParams, function(error, rows) {
				//console.log("likes = " + likeCount + ", dislikes = " + dislikeCount);
		});
	});
}
