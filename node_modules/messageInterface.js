var messages = require('message'),
	url = require('url'),
	querystring = require('querystring'),
	users = require('users'),
	dbAccess = require('dbAccess'),
	emailUtil = require('emailUtil');

var ListMessages = exports.ListMessages = function() {};
var viewMessage = exports.viewMessage = function() {};
var NewMessage = exports.NewMessage = function() {};
var SendMessage = exports.SendMessage = function() {};

/**
 * Send the displayMessages HTML page to the client
 *
 */
function displayMessagesPage(response, user) {
	// Get the inbox messages
	messages.getMessages(user, 0, function(error, iMsgList) {
		messages.getMessages(user, 1, function(error, sMsgList) {
			var variables = {
					pageTitle: 'CivicConnect - Message Center',
					user: user,
					inboxMsgList: iMsgList,
					sentMsgList: sMsgList
				}
			response.render('views/listMessages.html', variables);
		});
	});
}

/**
 * Send the newMessage HTML page to the client
 *
 */
function displayNewMessagePage(response, currentUser, sendToUserName, SubnBody) {
	var variables = {
		pageTitle: 'CivicConnect - New Message',
		user: currentUser,
		loggedInUser: currentUser.name,
		toUserName: '',
		msgSubject: '',
		msgBody: '',
		textarealimit: 5000,
		inputlimit: 150
	};
	if(sendToUserName)
		variables.toUserName = sendToUserName;
	if(SubnBody.subject)
		variables.msgSubject = SubnBody.subject;
	if(SubnBody.body)
		variables.msgBody = "In last message, "+sendToUserName+" wrote:\n=============\n"+SubnBody.body;
	response.render('views/newMessage.html', variables);
}

/**
 * Main function of the module
 * @param request Incoming request
 * @param response Response object to send the data
 */
NewMessage.display = function(request, response) {
    var data = '';
    request.on('data', function(chunk) {
        data += chunk;
    });
	request.on('end', function() {
	// Parse the url to see if it includes the name of the user to send to
	var qs = querystring.parse(data);
	var parsedURL = url.parse(request.url, true);
	var userid = parsedURL.query.userid;
	
	// TODO: check the session id from the cookie, then look up which user it is that way
	// This will do for now though..
	
	// Get logged-in user and display the New Message Page
	request.getUser(function(error, currentUser){
		if(error)
			util.log("Error getting user in messageInterface.NewMessage.display. " + error);
	
		if (currentUser)
		{
            // Display msgs
            if(isNaN(userid))
            {
                displayNewMessagePage(response, currentUser, qs.tousername, qs);
            }
            else
            {
                dbAccess.find('users', { properties:['name'], conditions:['id=' + userid] }, function(error, rows) {
                    if (error) {throw error;}    
                    
                    var username = "";
                    if(rows.length > 0)
                    {
                        username = rows[0]['name'];
                    }
                    displayNewMessagePage(response, currentUser, username, qs);
                });
            }
        }
		else
		{
			response.render('views/newMessage.html');
		}
	});
	});
};

/**
 * Main function of the module
 * @param request Incoming request
 * @param response Response object to send the data
 */
ListMessages.display = function(request, response) {
	// TODO: check the session id from the cookie, then look up which user it is that way
	// This will do for now though..
	
	// Get logged-in user and call display
	request.getUser(function(error, user){
		if(error)
			util.log("Error getting user in messageInterface.ListMessages.display. " + error);
		if (user) {
			// Display msgs
			displayMessagesPage(response, user.id);
		}
		else
			response.render('views/listMessages.html');
	});
};

viewMessage.display = function(request, response) {
	var parsedURL = url.parse(request.url, true);

	// TODO: check the session id from the cookie, then look up which user it is that way
	// This will do for now though..
	
	// Get logged-in user and call display
	request.getUser(function(error, user){
		if(error)
			util.log("Error getting user in messageInterface.display. " + error);
		if (user) {
			// Display msgs
			displayMessage(response, user.id, parsedURL.query.msgid, parsedURL.query.folderid);
		}
		else
			response.render('views/viewMessage.html');
	});
};

function displayMessage(response, user, msgId, folderId) {
	// Get the message
	messages.getMessage(msgId, folderId, function(error, message) {
		messages.setRead(msgId, folderId, function(error){
			if(error)
				throw error;
			dbAccess.runQuery('select id from users where name="'+message.from_name+'"', function(error, results) {
				var variables = {
					pageTitle: 'CivicConnect - Viewing Message - ' + message.subject,
					user: user,
					fromUserName: message.from_name,
					fromUserId: results[0].id,
					folder: folderId,
					msgDate: message.date,
					msgSubject: message.subject,
					msgId: msgId,
					msgBody: message.body
				}
				response.render('views/viewMessage.html', variables);
			});
		});
	});
};

SendMessage.send = function(request, response) {
    var data = '';
    request.on('data', function(chunk) {
        data += chunk;
    });
    
    request.on('end', function() {
        var qs = querystring.parse(data);
        request.getUser(function(error, user){
            if(error) {
                util.log("Error getting user in MessageInterface.SendMessage.Send. " + error);
                response.render('views/messageSent.html', { error: error });
            }
            if(!user) {
                util.log("Could not get user in MessageInterface.SendMessage.Send. " + error);
                response.render('views/messageSent.html', { error: error });
            }
            else {
                // Now get the userid of the tousername to be used in sendMessage
                users.getIdFromUsername(qs.tousername, function(error, touserid) {
                    if (error) {
                        util.log("Could not get touserid in MessageInterface.SendMessage.Send. " + error);
                        error = "Could not get toUserId. Please go back and double check the name.";
                        response.render('views/messageSent.html', { error: error });
                    }
                    else {
                        // Send the message
                        messages.sendMessage(user.id, touserid, qs.subject, qs.body, function(error) {
                            if (error) {
                                util.log("Error sending message in MessageInterface.SendMessage.Send. " + error);
                                response.render('views/messageSent.html', { error: error });
                            }
                            else {

								// sending email notification to recipient
								dbAccess.find('users', { conditions:['id="' + touserid + '"']}, function(error, recipient) {
									if (error) throw error;
									if (recipient) {
										dbAccess.find('users', { conditions:['id="' + user.id + '"']}, function(error, this_user) {
											if (error) throw error;
											if (this_user) {
												console.log('sending notification to user: ' + recipient[0].name + ' with email: ' + recipient[0].email);
												var homelink = url.parse(qs.link).protocol + '//' + url.parse(qs.link).host + '/';												
												var subject = '[CivicConnect] ' + this_user[0].name + ' has sent you a message';
												var body = '<html><body><h4>' + qs.subject + '</h4>' +
														   '<p>' + this_user[0].name + ' says, "' +
														   qs.body + '"</p>' +
														   '<h6>To see more details, follow the link below:</h6>' +
														   homelink;

												emailUtil.sendHTMLEmailToUserId(touserid, subject, body, function(error, success) {
													if (error)
														console.log('Error sending notification email to ' + recipient[0].email);
													else 
														console.log('Notification email sent successfully to ' + recipient[0].name + ' ' + recipient[0].email);
												});																									
											}
										}); // end dbAccess.find()										
									}
								});

                                response.render('views/messageSent.html', { to_user: qs.tousername });
                            }
                        }); // end messages.sendMessage()
                    }
                }); // end users.getIdFromUsername()
            }
        }); // end request.getUser()
    }); // end request.on()
}

var deleteMessage = exports.DeleteMessage = function(request, response) {
	var data = '';
    request.on('data', function(chunk) {
        data += chunk;
    });
	
	request.on('end', function() {
		var qs = querystring.parse(data);
		util.log("Deleting msg "+qs.mid);
		messages.deleteMessage(qs.mid, qs.fid, function(error) {
			if (error) {
				util.log("Error deleting message in MessageInterface.DeleteMessage. " + error);
				response.render('views/messageDeleted.html', { error: error });
			}
			else {
				response.render('views/messageDeleted.html');
			}
		});
	});
}
